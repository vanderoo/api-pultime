generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Token {
  id           String   @id @default(uuid()) @map("id")
  refreshToken String   @unique @map("refresh_token") @db.VarChar(255)
  userId       String   @map("user_id")
  createdAt    DateTime @default(now()) @map("created_at")
  expiresAt    DateTime @map("expires_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tokens")
}

model User {
  id        String   @id @default(uuid()) @map("id")
  email     String   @unique @map("email") @db.VarChar(255)
  username  String   @unique @map("username") @db.VarChar(255)
  password  String   @map("password") @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  task    Task[]
  Token   Token[]
  classes Class[] @relation("UserClasses")
  teams   Team[]  @relation("UserTeams")

  @@map("users")
}

model Class {
  id        String   @id @default(uuid()) @map("id")
  className String   @map("class_name") @db.VarChar(255)
  classCode String   @unique @map("class_code") @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  task    Task[]
  courses Course[]
  users   User[]   @relation("UserClasses")

  @@map("classes")
}

model Course {
  id         String   @id @default(uuid()) @map("id")
  courseName String   @map("course_name") @db.VarChar(255)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  classId String @map("class_id")
  class   Class  @relation(fields: [classId], references: [id], onDelete: Cascade)
  Task    Task[]

  @@map("courses")
}

model Team {
  id        String   @id @default(uuid()) @map("id")
  teamName  String   @map("team_name") @db.VarChar(255)
  teamCode  String   @unique @map("team_code") @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  task  Task[]
  users User[] @relation("UserTeams")

  @@map("teams")
}

model Task {
  id          String   @id @default(uuid()) @map("id")
  name        String   @map("name") @db.VarChar(255)
  description String?  @map("description") @db.Text
  endDate     String?  @map("end_date") @db.VarChar(255)
  startDate   String?  @map("start_date") @db.VarChar(255)
  classId     String?  @map("class_id") @db.VarChar(255)
  courseId    String?  @map("course_id") @db.VarChar(255)
  teamId      String?  @map("team_id") @db.VarChar(255)
  userId      String?  @map("user_id") @db.VarChar(255)
  assignee    String?  @map("assignee") @db.VarChar(255)
  progress    String?  @map("progress") @db.VarChar(255)
  context     String   @map("context") @db.VarChar(255)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user   User?   @relation(fields: [assignee], references: [id])
  class  Class?  @relation(fields: [classId], references: [id], onDelete: SetNull)
  team   Team?   @relation(fields: [teamId], references: [id], onDelete: SetNull)
  course Course? @relation(fields: [courseId], references: [id], onDelete: SetNull)

  @@map("tasks")
}
